#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Selenium –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ JavaScript –∏ –ø–æ–∏—Å–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç
"""

import time
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

try:
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.common.exceptions import TimeoutException, WebDriverException
except ImportError:
    print("‚ùå Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "selenium"])
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.common.exceptions import TimeoutException, WebDriverException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SeleniumTennisAnalyzer:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.driver = None
        self.occupied_color = "#d1d1d1"
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome WebDriver"""
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –±–µ–∑ GUI
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
            
            self.driver = webdriver.Chrome(options=chrome_options)
            print("‚úÖ Chrome WebDriver –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebDriver: {e}")
            return False
    
    def get_rendered_page(self, date: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
        if not self.driver:
            if not self.setup_driver():
                return None
        
        try:
            url = f"{self.base_url}/bronirovanie/?date={date}"
            print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            wait = WebDriverWait(self.driver, 10)
            wait.until(EC.presence_of_element_located((By.ID, "app")))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π HTML
            html_content = self.driver.page_source
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open(f'rendered_schedule_{date}.html', 'w', encoding='utf-8') as f:
                f.write(html_content)
            print(f"üíæ –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: rendered_schedule_{date}.html")
            
            return html_content
            
        except TimeoutException:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è {date}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è {date}: {e}")
            return None
    
    def find_occupied_cells(self, date: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –ø–æ CSS —Å—Ç–∏–ª—è–º"""
        html_content = self.get_rendered_page(date)
        if not html_content:
            return []
        
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω–∞ #d1d1d1
            occupied_elements = self.driver.find_elements(
                By.CSS_SELECTOR, 
                f"[style*='background: {self.occupied_color}'], [style*='background:{self.occupied_color}']"
            )
            
            print(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(occupied_elements)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –ø–æ —Å—Ç–∏–ª—é background: {self.occupied_color}")
            
            occupied_cells = []
            for element in occupied_elements:
                try:
                    cell_info = {
                        'tag': element.tag_name,
                        'text': element.text.strip(),
                        'style': element.get_attribute('style'),
                        'class': element.get_attribute('class'),
                        'position': element.location,
                        'size': element.size
                    }
                    occupied_cells.append(cell_info)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ: {e}")
            
            # –¢–∞–∫–∂–µ –∏—â–µ–º –ø–æ –¥—Ä—É–≥–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Å—Ç–∏–ª—è–º
            alternative_selectors = [
                "[style*='background-color: #d1d1d1']",
                "[style*='background-color:#d1d1d1']",
                "[style*='background: #d1d1d1']",
                "[style*='background:#d1d1d1']",
                ".occupied",
                ".busy", 
                ".taken",
                ".booked"
            ]
            
            for selector in alternative_selectors:
                elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                if elements:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
            
            return occupied_cells
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {e}")
            return []
    
    def analyze_schedule_structure(self, date: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        html_content = self.get_rendered_page(date)
        if not html_content:
            return {}
        
        try:
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            tables = self.driver.find_elements(By.TAG_NAME, "table")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü")
            
            # –ò—â–µ–º div'—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            schedule_divs = self.driver.find_elements(
                By.CSS_SELECTOR, 
                "div[class*='schedule'], div[class*='timetable'], div[class*='grid'], div[class*='court']"
            )
            print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(schedule_divs)} div'–æ–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
            
            # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω–∞
            colored_elements = self.driver.find_elements(
                By.CSS_SELECTOR,
                "[style*='background']"
            )
            print(f"üé® –ù–∞–π–¥–µ–Ω–æ {len(colored_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            structure_info = {
                'tables_count': len(tables),
                'schedule_divs_count': len(schedule_divs),
                'colored_elements_count': len(colored_elements),
                'occupied_cells': self.find_occupied_cells(date)
            }
            
            return structure_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return {}
    
    def analyze_week_selenium(self, start_date: str = None) -> Dict[str, Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—é —Å –ø–æ–º–æ—â—å—é Selenium"""
        if not start_date:
            start_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"üìÖ Selenium –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {start_date}")
        print("=" * 70)
        
        if not self.setup_driver():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WebDriver")
            return {}
        
        try:
            results = {}
            start_dt = datetime.strptime(start_date, '%Y-%m-%d')
            
            for i in range(3):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                current_date = start_dt + timedelta(days=i)
                date_str = current_date.strftime('%Y-%m-%d')
                date_display = current_date.strftime('%d.%m.%Y (%A)')
                
                print(f"\nüìÖ {date_display}")
                print("-" * 40)
                
                structure_info = self.analyze_schedule_structure(date_str)
                results[date_str] = {
                    'date_display': date_display,
                    'structure_info': structure_info
                }
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(2)
            
            return results
            
        finally:
            if self.driver:
                self.driver.quit()
                print("üîö WebDriver –∑–∞–∫—Ä—ã—Ç")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = SeleniumTennisAnalyzer()
    
    print("üéæ SELENIUM –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–í–û–ë–û–î–ù–´–• –ö–û–†–¢–û–í")
    print("=" * 60)
    print("üîç –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ JavaScript –∏ –ø–æ–∏—Å–∫ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç")
    print("üéØ –¶–≤–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç: #d1d1d1")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
    results = analyzer.analyze_week_selenium()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("=" * 50)
    
    for date_str, data in results.items():
        print(f"\nüìÖ {data['date_display']}")
        structure = data['structure_info']
        print(f"  ‚Ä¢ –¢–∞–±–ª–∏—Ü: {structure.get('tables_count', 0)}")
        print(f"  ‚Ä¢ Div'–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {structure.get('schedule_divs_count', 0)}")
        print(f"  ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–≤–µ—Ç–æ–º: {structure.get('colored_elements_count', 0)}")
        print(f"  ‚Ä¢ –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {len(structure.get('occupied_cells', []))}")
    
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
    print("  ‚Ä¢ rendered_schedule_*.html - –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")


if __name__ == "__main__":
    main()
