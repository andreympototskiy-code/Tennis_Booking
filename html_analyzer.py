#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HTML –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∫–æ—Ä—Ç–æ–≤
"""

import requests
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HTMLTennisAnalyzer:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def get_html_data(self, date: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
        try:
            url = f"{self.base_url}/bronirovanie/?date={date}"
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            return response.text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML –¥–ª—è –¥–∞—Ç—ã {date}: {e}")
            return None
    
    def extract_booking_data_from_html(self, html_content: str, date: str) -> Dict:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ HTML
        """
        print(f"üîç –ê–Ω–∞–ª–∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è {date}")
        
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞–Ω–Ω—ã—Ö –≤ HTML
        patterns = {
            'occupied': [
                r'occupied\s*:\s*(\[.*?\])',
                r'busy\s*:\s*(\[.*?\])',
                r'taken\s*:\s*(\[.*?\])',
                r'booked\s*:\s*(\[.*?\])',
            ],
            'courts': [
                r'courts\s*:\s*(\[.*?\])',
                r'courtTypes\s*:\s*(\[.*?\])',
                r'court_types\s*:\s*(\[.*?\])',
            ],
            'schedule': [
                r'schedule\s*:\s*(\{.*?\})',
                r'timetable\s*:\s*(\{.*?\})',
            ]
        }
        
        extracted_data = {}
        
        for data_type, pattern_list in patterns.items():
            for pattern in pattern_list:
                matches = re.findall(pattern, html_content, re.DOTALL)
                for match in matches:
                    try:
                        data = json.loads(match)
                        if data_type not in extracted_data:
                            extracted_data[data_type] = []
                        if isinstance(data, list):
                            extracted_data[data_type].extend(data)
                        else:
                            extracted_data[data_type].append(data)
                    except:
                        continue
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ script —Ç–µ–≥–∞—Ö
        script_matches = re.findall(r'<script[^>]*>(.*?)</script>', html_content, re.DOTALL)
        for script in script_matches:
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤ JavaScript –∫–æ–¥–µ
            js_patterns = [
                r'var\s+\w*occupied\w*\s*=\s*(\[.*?\]);',
                r'let\s+\w*occupied\w*\s*=\s*(\[.*?\]);',
                r'const\s+\w*occupied\w*\s*=\s*(\[.*?\]);',
            ]
            
            for pattern in js_patterns:
                matches = re.findall(pattern, script, re.DOTALL)
                for match in matches:
                    try:
                        data = json.loads(match)
                        if 'occupied' not in extracted_data:
                            extracted_data['occupied'] = []
                        if isinstance(data, list):
                            extracted_data['occupied'].extend(data)
                    except:
                        continue
        
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:")
        for key, value in extracted_data.items():
            print(f"  ‚Ä¢ {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return extracted_data
    
    def analyze_ground_courts_from_html(self, date: str) -> List[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã –≤ 22:00-00:00 –∏–∑ HTML
        """
        html_content = self.get_html_data(date)
        if not html_content:
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        extracted_data = self.extract_booking_data_from_html(html_content, date)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open(f'html_debug_{date}.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: html_debug_{date}.html")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(f'extracted_data_{date}.json', 'w', encoding='utf-8') as f:
            json.dump(extracted_data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: extracted_data_{date}.json")
        
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        return []
    
    def analyze_week_from_html(self, start_date: str = None) -> Dict[str, List[Dict]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –∏–∑ HTML
        """
        if not start_date:
            start_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"üìÖ –ê–Ω–∞–ª–∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {start_date}")
        print("=" * 70)
        
        results = {}
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        
        for i in range(7):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 7 –¥–Ω–µ–π
            current_date = start_dt + timedelta(days=i)
            date_str = current_date.strftime('%Y-%m-%d')
            date_display = current_date.strftime('%d.%m.%Y (%A)')
            
            print(f"\nüìÖ {date_display}")
            print("-" * 40)
            
            free_courts = self.analyze_ground_courts_from_html(date_str)
            results[date_str] = {
                'date_display': date_display,
                'free_courts': free_courts,
                'extracted_data': self.extract_booking_data_from_html(self.get_html_data(date_str), date_str) if self.get_html_data(date_str) else {}
            }
        
        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = HTMLTennisAnalyzer()
    
    print("üéæ HTML –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–í–û–ë–û–î–ù–´–• –ö–û–†–¢–û–í")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    test_dates = [
        '2025-09-17',  # –°—Ä–µ–¥–∞ - –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–∏–¥–Ω–æ 7 —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤
        '2025-09-18',  # –ß–µ—Ç–≤–µ—Ä–≥ - –≤—Å–µ –∫–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã
        '2025-09-19',  # –ü—è—Ç–Ω–∏—Ü–∞ - –Ω–µ—Ç 2-—á–∞—Å–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤
    ]
    
    for date in test_dates:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ {date}")
        print("=" * 40)
        analyzer.analyze_ground_courts_from_html(date)
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
    print("  ‚Ä¢ html_debug_*.html - HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print("  ‚Ä¢ extracted_data_*.json - –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


if __name__ == "__main__":
    main()
