#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, '/root/tennis-monitor')

from corrected_30min_analyzer import Corrected30MinAnalyzer
from telegram_notifier import TelegramNotifier, get_telegram_config
from simple_auto_booking import SimpleAutoBooking

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class IntegratedMonitorBooking:
    def __init__(self):
        self.analyzer = Corrected30MinAnalyzer()
        self.booking = SimpleAutoBooking()
        
        # Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.telegram_config = get_telegram_config()
        if self.telegram_config:
            self.notifier = TelegramNotifier(
                self.telegram_config['bot_token'], 
                self.telegram_config['chat_id']
            )
        else:
            self.notifier = None
            logger.warning("Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def monitor_and_book(self, date: str, time_from: int = 22, duration_hours: int = 2,
                        auto_book: bool = False, simulation: bool = True) -> Tuple[bool, str]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        logger.info(f"üéæ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {date}")
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—Ä—Ç—ã
        free_courts = self.analyzer.analyze_ground_courts_22h_corrected(date)
        
        if not free_courts:
            message = f"‚ùå –ù–∞ {date} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –≤ {time_from}:00"
            logger.info(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ—Ä—Ç–æ–≤
            if self.notifier:
                self.notifier.send_message(message)
            
            return False, message
        
        # 2. –ò—â–µ–º –∫–æ—Ä—Ç —Å –Ω—É–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        target_duration = f"{time_from:02d}:00-{(time_from + duration_hours) % 24:02d}:00"
        target_court = None
        
        for court in free_courts:
            if court['time_display'] == target_duration:
                target_court = court
                break
        
        if not target_court:
            message = f"‚ö†Ô∏è –ù–∞ {date} –Ω–µ—Ç –∫–æ—Ä—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º {duration_hours}-—á–∞—Å–æ–≤—ã–º —Å–ª–æ—Ç–æ–º –≤ {time_from}:00"
            logger.info(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
            if self.notifier:
                partial_message = self._format_partial_slots_message(date, free_courts)
                self.notifier.send_message(partial_message)
            
            return False, message
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–æ—Ä—Ç–µ
        message = self._format_court_found_message(date, target_court)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ—Ä—Ç: {target_court['court_number']}")
        
        if self.notifier:
            self.notifier.send_message(message)
        
        # 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if auto_book:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            success, booking_message = self.booking.auto_book_court(
                date=date,
                time_from=time_from,
                duration_hours=duration_hours,
                simulation=simulation
            )
            
            if success:
                booking_notification = f"üéØ –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï: {booking_message}"
                logger.info(booking_notification)
                
                if self.notifier:
                    self.notifier.send_message(booking_notification)
                
                return True, booking_notification
            else:
                error_notification = f"‚ùå –û–®–ò–ë–ö–ê –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø: {booking_message}"
                logger.error(error_notification)
                
                if self.notifier:
                    self.notifier.send_message(error_notification)
                
                return False, error_notification
        else:
            return True, message
    
    def _format_court_found_message(self, date: str, court: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–æ—Ä—Ç–µ"""
        date_display = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
        
        message = f"üéæ <b>–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ—Ä—Ç!</b>\n"
        message += f"üìÖ –î–∞—Ç–∞: {date_display}\n"
        message += f"üèüÔ∏è –ö–æ—Ä—Ç ‚Ññ{court['court_number']} - {court['court_type']}\n"
        message += f"‚è∞ –í—Ä–µ–º—è: {court['time_display']}\n"
        message += f"üí∞ –û–ø–ª–∞—Ç–∞ –≤ –∫–ª—É–±–µ\n\n"
        message += f"üîó <a href='https://x19.spb.ru/bronirovanie/?date={date}'>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</a>"
        
        return message
    
    def _format_partial_slots_message(self, date: str, courts: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö"""
        date_display = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
        
        message = f"‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–ª–æ—Ç—ã</b>\n"
        message += f"üìÖ –î–∞—Ç–∞: {date_display}\n"
        message += f"üèüÔ∏è –¢–∏–ø –∫–æ—Ä—Ç–∞: –ì—Ä—É–Ω—Ç\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∫–æ—Ä—Ç–∞–º
        court_groups = {}
        for court in courts:
            court_number = court['court_number']
            if court_number in [4, 5, 6]:
                physical_court = '–î—É—Ç–∏–∫ ‚Ññ 2'
            elif court_number in [7, 8, 9]:
                physical_court = '–î—É—Ç–∏–∫ ‚Ññ 3'
            elif court_number in [10, 11, 12, 13]:
                physical_court = '–î—É—Ç–∏–∫ ‚Ññ 4'
            else:
                physical_court = f'–ö–æ—Ä—Ç ‚Ññ {court_number}'
            
            if physical_court not in court_groups:
                court_groups[physical_court] = []
            court_groups[physical_court].append(court)
        
        for physical_court, courts_info in court_groups.items():
            message += f"üèüÔ∏è <b>{physical_court}</b>\n"
            for court_info in courts_info:
                duration = '2 —á–∞—Å–∞' if court_info['time_display'] == '22:00-00:00' else '1.5 —á–∞—Å–∞' if court_info['time_display'] == '22:30-00:00' else '1 —á–∞—Å' if court_info['time_display'] == '23:00-00:00' else '30 –º–∏–Ω'
                message += f"  ‚Ä¢ –ö–æ—Ä—Ç ‚Ññ{court_info['court_number']} - {court_info['time_display']} ({duration})\n"
            message += "\n"
        
        message += f"üîó <a href='https://x19.spb.ru/bronirovanie/?date={date}'>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</a>"
        
        return message
    
    def monitor_week(self, start_date: str, time_from: int = 22, duration_hours: int = 2,
                    auto_book: bool = False, simulation: bool = True) -> Dict[str, Tuple[bool, str]]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–µ–ª–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info(f"üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å {start_date}")
        
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        results = {}
        
        for i in range(7):  # –ù–µ–¥–µ–ª—è
            current_date = (start_dt + timedelta(days=i)).strftime('%Y-%m-%d')
            logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º {current_date}")
            
            success, message = self.monitor_and_book(
                date=current_date,
                time_from=time_from,
                duration_hours=duration_hours,
                auto_book=auto_book,
                simulation=simulation
            )
            
            results[current_date] = (success, message)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < 6:
                import time
                time.sleep(1)
        
        return results

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    system = IntegratedMonitorBooking()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    
    print(f"üéæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ {tomorrow}")
    print("=" * 70)
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    success, message = system.monitor_and_book(
        date=tomorrow,
        time_from=22,
        duration_hours=2,
        auto_book=False,
        simulation=True
    )
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {message}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ—Ä—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if success and "–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ—Ä—Ç" in message:
        print("\nü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        booking_success, booking_message = system.monitor_and_book(
            date=tomorrow,
            time_from=22,
            duration_hours=2,
            auto_book=True,
            simulation=True
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking_message}")

if __name__ == "__main__":
    main()
