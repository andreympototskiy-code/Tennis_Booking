#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""

import requests
import json
import logging
from typing import List, Dict, Optional
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self, bot_token: str, chat_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
    def send_message(self, text: str, parse_mode: str = "HTML") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            if result.get('ok'):
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {result}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    def send_tennis_slots_notification(self, slots: List[Dict], date: str, court_type: str = None, time_filter: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
        
        Args:
            slots: –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            date: –î–∞—Ç–∞
            court_type: –¢–∏–ø –∫–æ—Ä—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            time_filter: –í—Ä–µ–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not slots:
            return self.send_message(f"‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {date}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ —Ç–∏–ø—É –∫–æ—Ä—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
        filtered_slots = self._filter_slots(slots, court_type, time_filter)
        
        if not filtered_slots:
            return self.send_message(f"‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ {court_type} –≤ {time_filter} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {date}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_slots_message(filtered_slots, date, court_type, time_filter)
        
        return self.send_message(message)
    
    def _filter_slots(self, slots: List[Dict], court_type: str = None, time_filter: str = None) -> List[Dict]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–æ—Ç—ã –ø–æ —Ç–∏–ø—É –∫–æ—Ä—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            slots: –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
            court_type: –¢–∏–ø –∫–æ—Ä—Ç–∞
            time_filter: –í—Ä–µ–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "22" –∏–ª–∏ "22:00")
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
        """
        filtered = slots.copy()
        
        if court_type:
            filtered = [slot for slot in filtered if court_type.lower() in slot.get('court_type', '').lower()]
        
        if time_filter:
            # –ò—â–µ–º —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            # time_from –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫–æ–π, —Ç–∞–∫ –∏ —á–∏—Å–ª–æ–º
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∞—Å –∏–∑ time_filter
                if ':' in time_filter:
                    hour = int(time_filter.split(':')[0])
                else:
                    hour = int(time_filter)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (time_from –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º)
                filtered = [slot for slot in filtered 
                           if (slot.get('time_from') == hour or 
                               slot.get('time_from') == f"{hour:02d}" or
                               str(slot.get('time_from')) == str(hour))]
                
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                pass
        
        return filtered
    
    def _format_slots_message(self, slots: List[Dict], date: str, court_type: str = None, time_filter: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–æ—Ç–∞—Ö
        
        Args:
            slots: –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
            date: –î–∞—Ç–∞
            court_type: –¢–∏–ø –∫–æ—Ä—Ç–∞
            time_filter: –í—Ä–µ–º—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"üéæ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–æ—Ä—Ç—ã</b>\n"
        message += f"üìÖ –î–∞—Ç–∞: {date}\n"
        
        if court_type:
            message += f"üèüÔ∏è –¢–∏–ø –∫–æ—Ä—Ç–∞: {court_type}\n"
        
        if time_filter:
            message += f"‚è∞ –í—Ä–µ–º—è: {time_filter}\n"
        
        message += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        time_groups = {}
        for slot in slots:
            time_key = f"{slot['time_from']}-{slot['time_to']}"
            if time_key not in time_groups:
                time_groups[time_key] = []
            time_groups[time_key].append(slot)
        
        for time_range, time_slots in sorted(time_groups.items()):
            message += f"‚è∞ <b>{time_range}</b>\n"
            for slot in time_slots:
                message += f"  üèüÔ∏è {slot['court_type']} (–ö–æ—Ä—Ç ‚Ññ{slot['court_number']})\n"
            message += "\n"
        
        message += "üîó <a href='https://x19.spb.ru/bronirovanie/'>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</a>"
        
        return message
    
    def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            url = f"{self.base_url}/getMe"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            if result.get('ok'):
                bot_info = result.get('result', {})
                logger.info(f"Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'unknown')}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {result}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {e}")
            return False


def get_telegram_config() -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–ª–∏ None
    """
    config = {}
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open('telegram_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
        return config
    except FileNotFoundError:
        pass
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if bot_token and chat_id:
        config = {
            'bot_token': bot_token,
            'chat_id': chat_id
        }
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return config
    
    logger.warning("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return None


def create_telegram_config_template():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram"""
    template = {
        "bot_token": "YOUR_BOT_TOKEN_HERE",
        "chat_id": "YOUR_CHAT_ID_HERE",
        "instructions": {
            "bot_token": "–¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)",
            "chat_id": "ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ–ª—É—á–∏—Ç—å —É @userinfobot)"
        }
    }
    
    with open('telegram_config_template.json', 'w', encoding='utf-8') as f:
        json.dump(template, f, ensure_ascii=False, indent=2)
    
    print("üìù –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: telegram_config_template.json")
    print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather –≤ Telegram")
    print("2. –ü–æ–ª—É—á–∏—Ç–µ ID —á–∞—Ç–∞ —É @userinfobot")
    print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ telegram_config_template.json –≤ telegram_config.json")
    print("4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ telegram_config.json")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    config = get_telegram_config()
    
    if not config:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        create_telegram_config_template()
    else:
        notifier = TelegramNotifier(config['bot_token'], config['chat_id'])
        
        if notifier.test_connection():
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = "üéæ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            if notifier.send_message(test_message):
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram")
