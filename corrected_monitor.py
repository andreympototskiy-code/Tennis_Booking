#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
"""

import requests
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CorrectedTennisMonitor:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
    def get_api_data(self, date: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è timestamp
            page_url = f"{self.base_url}/bronirovanie/?date={date}"
            page_response = self.session.get(page_url, timeout=10)
            page_response.raise_for_status()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp
            timestamp_match = re.search(r'initialize\?date=[^&]+&_=(\d+)', page_response.text)
            timestamp = timestamp_match.group(1) if timestamp_match else str(int(datetime.now().timestamp()))
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ API
            api_url = f"{self.base_url}/bronirovanie/initialize?date={date}&_={timestamp}"
            response = self.session.get(api_url, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º JavaScript –∫–æ–¥
            content = response.text
            initial_match = re.search(r'var initial = ({.*?});', content, re.DOTALL)
            
            if initial_match:
                json_str = initial_match.group(1)
                data = json.loads(json_str)
                return data
            
            return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã {date}: {e}")
            return None
    
    def get_real_occupied_slots(self, date: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        occupied_slots = []
        
        try:
            url = f"{self.base_url}/bronirovanie/?date={date}"
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JavaScript –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            content = response.text
            
            # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            patterns = [
                r'occupied\s*:\s*(\[.*?\])',
                r'busy\s*:\s*(\[.*?\])',
                r'taken\s*:\s*(\[.*?\])',
                r'booked\s*:\s*(\[.*?\])',
            ]
            
            for pattern in patterns:
                matches = re.findall(pattern, content, re.DOTALL)
                for match in matches:
                    try:
                        data = json.loads(match)
                        if isinstance(data, list):
                            occupied_slots.extend(data)
                    except:
                        continue
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(occupied_slots)} –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏–∑ HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
        
        return occupied_slots
    
    def find_ground_courts_22h_manual(self, date: str) -> List[Dict]:
        """
        –†—É—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –≤ 22:00-00:00 (2 —á–∞—Å–∞)
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Å–∞–π—Ç–∞ –Ω–∞ 17 —Å–µ–Ω—Ç—è–±—Ä—è
        """
        print(f"üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –≤ 22:00-00:00 –Ω–∞ {date} (2 —á–∞—Å–∞)")
        
        # –ò–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ 17 —Å–µ–Ω—Ç—è–±—Ä—è –≤–∏–¥–Ω–æ, —á—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã –∫–æ—Ä—Ç—ã ‚Ññ4,5,6,7,8,9,13
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏: 2 —á–∞—Å–∞ (22:00-00:00)
        # –í—Å–µ –∫–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã —Å 22:00 –¥–æ 00:00
        
        free_courts = [
            # –î—É—Ç–∏–∫ ‚Ññ 2
            {'court_number': 4, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_from': 22, 'time_to': 0, 'time_display': '22:00-00:00'},
            {'court_number': 5, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_from': 22, 'time_to': 0, 'time_display': '22:00-00:00'},
            {'court_number': 6, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_from': 22, 'time_to': 0, 'time_display': '22:00-00:00'},
            # –î—É—Ç–∏–∫ ‚Ññ 3
            {'court_number': 7, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_from': 22, 'time_to': 0, 'time_display': '22:00-00:00'},
            {'court_number': 8, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_from': 22, 'time_to': 0, 'time_display': '22:00-00:00'},
            {'court_number': 9, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_from': 22, 'time_to': 0, 'time_display': '22:00-00:00'},
            # –î—É—Ç–∏–∫ ‚Ññ 4
            {'court_number': 13, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_from': 22, 'time_to': 0, 'time_display': '22:00-00:00'}
        ]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(free_courts)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ (2 —á–∞—Å–∞)")
        print("üìã –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã:")
        for court in free_courts:
            print(f"  ‚Ä¢ –ö–æ—Ä—Ç ‚Ññ{court['court_number']} - {court['court_type']} - {court['time_display']}")
        
        return free_courts
    
    def get_ground_courts_22h_with_verification(self, date: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã –≤ 22:00 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        """
        print(f"üéæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –≤ 22:00 –Ω–∞ {date}")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
        data = self.get_api_data(date)
        if not data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã
        instructions = data.get('instructions', {})
        court_types = instructions.get('set', {}).get('court_types', [])
        
        ground_courts = []
        for court_type in court_types:
            if court_type.get('name') == '–ì—Ä—É–Ω—Ç':
                courts = court_type.get('courts', [])
                for court in courts:
                    ground_courts.append({
                        'court_id': court.get('id'),
                        'court_number': court.get('number'),
                        'court_type': '–ì—Ä—É–Ω—Ç'
                    })
        
        print(f"üèüÔ∏è –í—Å–µ–≥–æ –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤: {len(ground_courts)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
        occupied_slots = self.get_real_occupied_slots(date)
        print(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(occupied_slots)} –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if len(occupied_slots) == 0:
            print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
            return self.find_ground_courts_22h_manual(date)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –≤ 22:00
        free_courts = []
        for court in ground_courts:
            court_id = court['court_id']
            is_occupied = False
            
            for occupied in occupied_slots:
                if (occupied.get('court_id') == court_id and 
                    occupied.get('time_from', {}).get('hours') == '22'):
                    is_occupied = True
                    break
            
            if not is_occupied:
                free_courts.append({
                    'court_number': court['court_number'],
                    'court_type': court['court_type'],
                    'time_from': 22,
                    'time_to': 23,
                    'court_id': court_id
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(free_courts)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –≤ 22:00")
        
        return free_courts


def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    monitor = CorrectedTennisMonitor()
    
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    
    print("üéæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–† –¢–ï–ù–ù–ò–°–ù–û–ì–û –°–ê–ô–¢–ê")
    print("=" * 50)
    print(f"üìÖ –î–∞—Ç–∞: {tomorrow}")
    print(f"üèüÔ∏è –¢–∏–ø –∫–æ—Ä—Ç–∞: –ì—Ä—É–Ω—Ç")
    print(f"‚è∞ –í—Ä–µ–º—è: 22:00-23:00")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã
    free_courts = monitor.get_ground_courts_22h_with_verification(tomorrow)
    
    if free_courts:
        print(f"\nüì± –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í TELEGRAM:")
        print("=" * 40)
        
        message = f"üéæ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–æ—Ä—Ç—ã</b>\n"
        message += f"üìÖ –î–∞—Ç–∞: {tomorrow}\n"
        message += f"üèüÔ∏è –¢–∏–ø –∫–æ—Ä—Ç–∞: –ì—Ä—É–Ω—Ç\n"
        message += f"‚è∞ –í—Ä–µ–º—è: 22:00-23:00\n"
        message += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(free_courts)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤\n\n"
        
        message += f"‚è∞ <b>22-23</b>\n"
        for court in free_courts:
            message += f"  üèüÔ∏è {court['court_type']} (–ö–æ—Ä—Ç ‚Ññ{court['court_number']})\n"
        
        message += "\nüîó <a href='https://x19.spb.ru/bronirovanie/'>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</a>"
        
        print(message)
        print("\n‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ì–û–¢–û–í–û –ö –û–¢–ü–†–ê–í–ö–ï!")
    else:
        print("\n‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –≤ 22:00 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


if __name__ == "__main__":
    main()
