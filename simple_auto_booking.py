#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤
"""

import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, '/root/tennis-monitor')

from corrected_30min_analyzer import Corrected30MinAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SimpleAutoBooking:
    def __init__(self):
        self.analyzer = Corrected30MinAnalyzer()
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data = {
            'name': '–ü–æ—Ç–æ—Ü–∫–∏–π –ê–Ω–¥—Ä–µ–π',
            'phone': '+79313203496',
            'email': 'andrey.m.pototskiy@gmail.com',
            'payment_type': 'club'  # –û–ø–ª–∞—Ç–∞ –≤ –∫–ª—É–±–µ
        }
    
    def find_available_court(self, date: str, time_from: int = 22, duration_hours: int = 2) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        logger.info(f"–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä—Ç–∞ –Ω–∞ {date} –≤ {time_from}:00 ({duration_hours}—á)")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        free_courts = self.analyzer.analyze_ground_courts_22h_corrected(date)
        
        if not free_courts:
            logger.warning("–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
        
        # –ò—â–µ–º –∫–æ—Ä—Ç —Å –Ω—É–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        target_duration = f"{time_from:02d}:00-{(time_from + duration_hours) % 24:02d}:00"
        
        for court in free_courts:
            if court['time_display'] == target_duration:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ—Ä—Ç ‚Ññ{court['court_number']}")
                return {
                    'court_id': court['court_number'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–∞–∫ ID
                    'court_number': court['court_number'],
                    'court_type': '–ì—Ä—É–Ω—Ç',
                    'time_from': time_from,
                    'time_to': (time_from + duration_hours) % 24,
                    'date': date,
                    'time_display': court['time_display']
                }
        
        logger.warning(f"–ö–æ—Ä—Ç —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {target_duration} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def prepare_booking_form_data(self, court_data: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∞–π—Ç–∞
        form_data = {
            'date': court_data['date'],
            'order[type_id]': '1',  # –¢–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ 1)
            'ordertime[0][court_id]': str(court_data['court_id']),
            'ordertime[0][time_from]': f"{court_data['time_from']:02d}:00:00",
            'ordertime[0][time_to]': f"{court_data['time_to']:02d}:00:00",
            # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'order[name]': self.user_data['name'],
            'order[phone]': self.user_data['phone'],
            'order[email]': self.user_data['email'],
            'order[payment_type]': self.user_data['payment_type']
        }
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(form_data)} –ø–æ–ª–µ–π")
        return form_data
    
    def simulate_booking(self, court_data: Dict) -> Tuple[bool, str]:
        """–°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info(f"–°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–∞ ‚Ññ{court_data['court_number']}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        form_data = self.prepare_booking_form_data(court_data)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return True, f"–ö–æ—Ä—Ç ‚Ññ{court_data['court_number']} —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {court_data['time_display']} (–°–ò–ú–£–õ–Ø–¶–ò–Ø)"
    
    def auto_book_court(self, date: str, time_from: int = 22, duration_hours: int = 2,
                       simulation: bool = True) -> Tuple[bool, str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–∞"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {date}")
        
        # 1. –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ—Ä—Ç
        court_data = self.find_available_court(date, time_from, duration_hours)
        if not court_data:
            return False, "–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if simulation:
            success, message = self.simulate_booking(court_data)
        else:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            success, message = False, "–†–µ–∞–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"
        
        if success:
            logger.info(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ö–æ—Ä—Ç ‚Ññ{court_data['court_number']}")
            return True, message
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {message}")
            return False, message

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    booking = SimpleAutoBooking()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    
    print(f"üéæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {tomorrow}")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    success, message = booking.auto_book_court(
        date=tomorrow,
        time_from=22,
        duration_hours=2,
        simulation=True
    )
    
    if success:
        print(f"‚úÖ {message}")
    else:
        print(f"‚ùå {message}")

if __name__ == "__main__":
    main()
