#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
"""

from datetime import datetime, timedelta
from typing import List, Dict
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from telegram_notifier import TelegramNotifier, get_telegram_config

class ManualWeeklyAnalyzer:
    def __init__(self):
        # –î–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å–∞–π—Ç–∞
        self.weekly_data = {
            '2025-09-15': {  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'free_courts': [
                    {'court_number': 4, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 6, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 13, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                ]
            },
            '2025-09-16': {  # –í—Ç–æ—Ä–Ω–∏–∫ - –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'free_courts': [
                    {'court_number': 4, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 6, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 13, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                ]
            },
            '2025-09-17': {  # –°—Ä–µ–¥–∞ - –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                'free_courts': [
                    {'court_number': 4, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 5, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 6, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 7, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 8, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 9, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 13, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                ]
            },
            '2025-09-18': {  # –ß–µ—Ç–≤–µ—Ä–≥ - –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–≤—Å–µ –∫–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã)
                'free_courts': [
                    {'court_number': 4, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 5, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 6, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 7, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 8, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 9, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 10, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 11, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 12, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 13, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                ]
            },
            '2025-09-19': {  # –ü—è—Ç–Ω–∏—Ü–∞ - –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–Ω–µ—Ç 2-—á–∞—Å–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤)
                'free_courts': []
            },
            '2025-09-20': {  # –°—É–±–±–æ—Ç–∞ - –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'free_courts': [
                    {'court_number': 6, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 8, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 13, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                ]
            },
            '2025-09-21': {  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'free_courts': [
                    {'court_number': 4, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 7, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 9, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                    {'court_number': 12, 'court_type': '–ì—Ä—É–Ω—Ç', 'time_display': '22:00-00:00'},
                ]
            },
        }
    
    def group_courts_by_physical_court(self, free_courts: List[Dict]) -> Dict[str, List[int]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∫–æ—Ä—Ç—ã –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∫–æ—Ä—Ç–∞–º"""
        court_groups = {}
        for court in free_courts:
            court_number = court['court_number']
            if court_number in [4, 5, 6]:
                physical_court = "–î—É—Ç–∏–∫ ‚Ññ 2"
            elif court_number in [7, 8, 9]:
                physical_court = "–î—É—Ç–∏–∫ ‚Ññ 3"
            elif court_number in [10, 11, 12, 13]:
                physical_court = "–î—É—Ç–∏–∫ ‚Ññ 4"
            else:
                physical_court = f"–ö–æ—Ä—Ç ‚Ññ {court_number}"
            
            if physical_court not in court_groups:
                court_groups[physical_court] = []
            court_groups[physical_court].append(court_number)
        
        return court_groups
    
    def analyze_week(self, start_date: str = None) -> Dict[str, Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
        """
        if not start_date:
            start_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"üìÖ –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {start_date}")
        print("=" * 70)
        print("‚è∞ –í—Ä–µ–º—è: 22:00-00:00 (2 —á–∞—Å–∞)")
        print("üèüÔ∏è –¢–∏–ø –∫–æ—Ä—Ç–∞: –ì—Ä—É–Ω—Ç")
        print("=" * 70)
        
        results = {}
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        
        for i in range(7):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 7 –¥–Ω–µ–π
            current_date = start_dt + timedelta(days=i)
            date_str = current_date.strftime('%Y-%m-%d')
            date_display = current_date.strftime('%d.%m.%Y (%A)')
            
            print(f"\nüìÖ {date_display}")
            print("-" * 40)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            day_data = self.weekly_data.get(date_str, {'free_courts': []})
            free_courts = day_data['free_courts']
            
            results[date_str] = {
                'date_display': date_display,
                'free_courts': free_courts
            }
            
            if free_courts:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∫–æ—Ä—Ç–∞–º
                court_groups = self.group_courts_by_physical_court(free_courts)
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(free_courts)} –∫–æ—Ä—Ç–æ–≤")
                for physical_court, court_numbers in court_groups.items():
                    print(f"  üèüÔ∏è {physical_court}: –∫–æ—Ä—Ç—ã {', '.join(map(str, court_numbers))}")
            else:
                print("‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö 2-—á–∞—Å–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ 22:00-00:00 –Ω–µ—Ç")
        
        return results
    
    def generate_weekly_report(self, results: Dict[str, Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –∫–æ—Ä—Ç–∞–º –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        report = "üéæ –û–¢–ß–ï–¢ –ü–û –°–í–û–ë–û–î–ù–´–ú –ì–†–£–ù–¢–û–í–´–ú –ö–û–†–¢–ê–ú –ù–ê –ù–ï–î–ï–õ–Æ\n"
        report += "=" * 60 + "\n"
        report += "‚è∞ –í—Ä–µ–º—è: 22:00-00:00 (2 —á–∞—Å–∞)\n"
        report += "üèüÔ∏è –¢–∏–ø –∫–æ—Ä—Ç–∞: –ì—Ä—É–Ω—Ç\n"
        report += "üìä –î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å–∞–π—Ç–∞\n\n"
        
        total_free_days = 0
        total_free_courts = 0
        
        for date_str, data in results.items():
            date_display = data['date_display']
            free_courts = data['free_courts']
            
            report += f"üìÖ {date_display}\n"
            report += "-" * 30 + "\n"
            
            if free_courts:
                total_free_days += 1
                total_free_courts += len(free_courts)
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∫–æ—Ä—Ç–∞–º
                court_groups = self.group_courts_by_physical_court(free_courts)
                
                report += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(free_courts)} –∫–æ—Ä—Ç–æ–≤\n"
                for physical_court, court_numbers in court_groups.items():
                    report += f"  üèüÔ∏è {physical_court}: –∫–æ—Ä—Ç—ã {', '.join(map(str, court_numbers))}\n"
            else:
                report += "‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–µ—Ç\n"
            
            report += "\n"
        
        report += "=" * 60 + "\n"
        report += f"üìä –ò–¢–û–ì–û:\n"
        report += f"  ‚Ä¢ –î–Ω–µ–π —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –∫–æ—Ä—Ç–∞–º–∏: {total_free_days} –∏–∑ 7\n"
        report += f"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {total_free_courts}\n"
        report += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ç–æ–≤ –≤ –¥–µ–Ω—å: {total_free_courts/7:.1f}\n"
        
        return report
    
    def send_weekly_report_to_telegram(self, results: Dict[str, Dict]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram"""
        config = get_telegram_config()
        if not config:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        notifier = TelegramNotifier(config['bot_token'], config['chat_id'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if not notifier.test_connection():
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram!")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üéæ <b>–û–¢–ß–ï–¢ –ü–û –°–í–û–ë–û–î–ù–´–ú –ì–†–£–ù–¢–û–í–´–ú –ö–û–†–¢–ê–ú –ù–ê –ù–ï–î–ï–õ–Æ</b>\n"
        message += "=" * 50 + "\n"
        message += "‚è∞ –í—Ä–µ–º—è: 22:00-00:00 (2 —á–∞—Å–∞)\n"
        message += "üèüÔ∏è –¢–∏–ø –∫–æ—Ä—Ç–∞: –ì—Ä—É–Ω—Ç\n"
        message += "üìä –î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å–∞–π—Ç–∞\n\n"
        
        total_free_days = 0
        total_free_courts = 0
        
        for date_str, data in results.items():
            date_display = data['date_display']
            free_courts = data['free_courts']
            
            if free_courts:
                total_free_days += 1
                total_free_courts += len(free_courts)
                
                message += f"üìÖ <b>{date_display}</b>\n"
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∫–æ—Ä—Ç–∞–º
                court_groups = self.group_courts_by_physical_court(free_courts)
                
                message += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(free_courts)} –∫–æ—Ä—Ç–æ–≤\n"
                for physical_court, court_numbers in court_groups.items():
                    message += f"  üèüÔ∏è {physical_court}: –∫–æ—Ä—Ç—ã {', '.join(map(str, court_numbers))}\n"
                message += "\n"
        
        message += "=" * 50 + "\n"
        message += f"üìä <b>–ò–¢–û–ì–û:</b>\n"
        message += f"  ‚Ä¢ –î–Ω–µ–π —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –∫–æ—Ä—Ç–∞–º–∏: {total_free_days} –∏–∑ 7\n"
        message += f"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {total_free_courts}\n"
        message += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ç–æ–≤ –≤ –¥–µ–Ω—å: {total_free_courts/7:.1f}\n\n"
        message += "üîó <a href='https://x19.spb.ru/bronirovanie/'>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</a>"
        
        success = notifier.send_message(message)
        return success


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = ManualWeeklyAnalyzer()
    
    print("üéæ –†–£–ß–ù–û–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–í–û–ë–û–î–ù–´–• –ö–û–†–¢–û–í –ù–ê –ù–ï–î–ï–õ–Æ")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—é –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è
    results = analyzer.analyze_week()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = analyzer.generate_weekly_report(results)
    print("\n" + report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    with open('manual_weekly_report.txt', 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: manual_weekly_report.txt")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram...")
    if analyzer.send_weekly_report_to_telegram(results):
        print("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram")


if __name__ == "__main__":
    main()
