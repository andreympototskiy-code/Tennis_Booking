#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é
"""

import requests
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WeeklyTennisAnalyzer:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
    def get_api_data(self, date: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è timestamp
            page_url = f"{self.base_url}/bronirovanie/?date={date}"
            page_response = self.session.get(page_url, timeout=10)
            page_response.raise_for_status()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp
            timestamp_match = re.search(r'initialize\?date=[^&]+&_=(\d+)', page_response.text)
            timestamp = timestamp_match.group(1) if timestamp_match else str(int(datetime.now().timestamp()))
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ API
            api_url = f"{self.base_url}/bronirovanie/initialize?date={date}&_={timestamp}"
            response = self.session.get(api_url, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º JavaScript –∫–æ–¥
            content = response.text
            initial_match = re.search(r'var initial = ({.*?});', content, re.DOTALL)
            
            if initial_match:
                json_str = initial_match.group(1)
                data = json.loads(json_str)
                return data
            
            return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã {date}: {e}")
            return None
    
    def analyze_ground_courts_22h(self, date: str) -> List[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã –≤ 22:00-00:00 (2 —á–∞—Å–∞) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        """
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –≤ 22:00-00:00 –Ω–∞ {date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
        data = self.get_api_data(date)
        if not data:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {date}")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä—Ç–∞—Ö
        instructions = data.get('instructions', {})
        set_data = instructions.get('set', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã
        court_types = set_data.get('court_types', [])
        ground_courts = []
        
        for court_type in court_types:
            if court_type.get('name') == '–ì—Ä—É–Ω—Ç':
                courts = court_type.get('courts', [])
                for court in courts:
                    ground_courts.append({
                        'court_id': court.get('id'),
                        'court_number': court.get('number'),
                        'court_type': '–ì—Ä—É–Ω—Ç'
                    })
        
        print(f"üèüÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(ground_courts)} –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
        occupied_slots = set_data.get('occupied', [])
        print(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(occupied_slots)} –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ 2-—á–∞—Å–æ–≤—ã–µ —Å–ª–æ—Ç—ã –≤ 22:00-00:00
        free_courts = []
        
        for court in ground_courts:
            court_id = court['court_id']
            court_number = court['court_number']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –∫–æ—Ä—Ç –≤ 22:00-23:00 –∏ 23:00-00:00
            slot_22_23_occupied = False
            slot_23_24_occupied = False
            
            for occupied in occupied_slots:
                if occupied.get('court_id') == court_id:
                    time_from = occupied.get('time_from', {})
                    if isinstance(time_from, dict):
                        hours = time_from.get('hours', '')
                        if hours == '22':
                            slot_22_23_occupied = True
                        elif hours == '23':
                            slot_23_24_occupied = True
                    elif isinstance(time_from, (int, str)):
                        time_str = str(time_from)
                        if time_str == '22':
                            slot_22_23_occupied = True
                        elif time_str == '23':
                            slot_23_24_occupied = True
            
            # –ï—Å–ª–∏ –æ–±–∞ —Å–ª–æ—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã, —Ç–æ –µ—Å—Ç—å 2-—á–∞—Å–æ–≤–æ–π —Å–ª–æ—Ç
            if not slot_22_23_occupied and not slot_23_24_occupied:
                free_courts.append({
                    'court_number': court_number,
                    'court_type': '–ì—Ä—É–Ω—Ç',
                    'time_display': '22:00-00:00',
                    'court_id': court_id
                })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(free_courts)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö 2-—á–∞—Å–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ 22:00-00:00")
        
        return free_courts
    
    def analyze_week(self, start_date: str = None) -> Dict[str, List[Dict]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
        """
        if not start_date:
            start_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"üìÖ –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {start_date}")
        print("=" * 70)
        
        results = {}
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        
        for i in range(7):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 7 –¥–Ω–µ–π
            current_date = start_dt + timedelta(days=i)
            date_str = current_date.strftime('%Y-%m-%d')
            date_display = current_date.strftime('%d.%m.%Y (%A)')
            
            print(f"\nüìÖ {date_display}")
            print("-" * 40)
            
            free_courts = self.analyze_ground_courts_22h(date_str)
            results[date_str] = {
                'date_display': date_display,
                'free_courts': free_courts
            }
            
            if free_courts:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∫–æ—Ä—Ç–∞–º
                court_groups = {}
                for court in free_courts:
                    court_number = court['court_number']
                    if court_number in [4, 5, 6]:
                        physical_court = "–î—É—Ç–∏–∫ ‚Ññ 2"
                    elif court_number in [7, 8, 9]:
                        physical_court = "–î—É—Ç–∏–∫ ‚Ññ 3"
                    elif court_number in [10, 11, 12, 13]:
                        physical_court = "–î—É—Ç–∏–∫ ‚Ññ 4"
                    else:
                        physical_court = f"–ö–æ—Ä—Ç ‚Ññ {court_number}"
                    
                    if physical_court not in court_groups:
                        court_groups[physical_court] = []
                    court_groups[physical_court].append(court_number)
                
                print(f"üèüÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ {len(free_courts)} –∫–æ—Ä—Ç–æ–≤:")
                for physical_court, court_numbers in court_groups.items():
                    print(f"  ‚Ä¢ {physical_court}: –∫–æ—Ä—Ç—ã {', '.join(map(str, court_numbers))}")
            else:
                print("‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö 2-—á–∞—Å–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ 22:00-00:00 –Ω–µ—Ç")
        
        return results
    
    def generate_weekly_report(self, results: Dict[str, List[Dict]]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –∫–æ—Ä—Ç–∞–º –Ω–∞ –Ω–µ–¥–µ–ª—é
        """
        report = "üéæ –û–¢–ß–ï–¢ –ü–û –°–í–û–ë–û–î–ù–´–ú –ì–†–£–ù–¢–û–í–´–ú –ö–û–†–¢–ê–ú –ù–ê –ù–ï–î–ï–õ–Æ\n"
        report += "=" * 60 + "\n"
        report += "‚è∞ –í—Ä–µ–º—è: 22:00-00:00 (2 —á–∞—Å–∞)\n"
        report += "üèüÔ∏è –¢–∏–ø –∫–æ—Ä—Ç–∞: –ì—Ä—É–Ω—Ç\n\n"
        
        total_free_days = 0
        total_free_courts = 0
        
        for date_str, data in results.items():
            date_display = data['date_display']
            free_courts = data['free_courts']
            
            report += f"üìÖ {date_display}\n"
            report += "-" * 30 + "\n"
            
            if free_courts:
                total_free_days += 1
                total_free_courts += len(free_courts)
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∫–æ—Ä—Ç–∞–º
                court_groups = {}
                for court in free_courts:
                    court_number = court['court_number']
                    if court_number in [4, 5, 6]:
                        physical_court = "–î—É—Ç–∏–∫ ‚Ññ 2"
                    elif court_number in [7, 8, 9]:
                        physical_court = "–î—É—Ç–∏–∫ ‚Ññ 3"
                    elif court_number in [10, 11, 12, 13]:
                        physical_court = "–î—É—Ç–∏–∫ ‚Ññ 4"
                    else:
                        physical_court = f"–ö–æ—Ä—Ç ‚Ññ {court_number}"
                    
                    if physical_court not in court_groups:
                        court_groups[physical_court] = []
                    court_groups[physical_court].append(court_number)
                
                report += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(free_courts)} –∫–æ—Ä—Ç–æ–≤\n"
                for physical_court, court_numbers in court_groups.items():
                    report += f"  üèüÔ∏è {physical_court}: –∫–æ—Ä—Ç—ã {', '.join(map(str, court_numbers))}\n"
            else:
                report += "‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–µ—Ç\n"
            
            report += "\n"
        
        report += "=" * 60 + "\n"
        report += f"üìä –ò–¢–û–ì–û:\n"
        report += f"  ‚Ä¢ –î–Ω–µ–π —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –∫–æ—Ä—Ç–∞–º–∏: {total_free_days} –∏–∑ 7\n"
        report += f"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {total_free_courts}\n"
        report += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ç–æ–≤ –≤ –¥–µ–Ω—å: {total_free_courts/7:.1f}\n"
        
        return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = WeeklyTennisAnalyzer()
    
    print("üéæ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–í–û–ë–û–î–ù–´–• –ö–û–†–¢–û–í –ù–ê –ù–ï–î–ï–õ–Æ")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—é –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è
    results = analyzer.analyze_week()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = analyzer.generate_weekly_report(results)
    print("\n" + report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    with open('weekly_report.txt', 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: weekly_report.txt")


if __name__ == "__main__":
    main()
