#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∫–æ—Ä—Ç–æ–≤
"""

import requests
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class APITennisAnalyzer:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def get_booking_api_data(self, date: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç API –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ API endpoints
            api_endpoints = [
                f"{self.base_url}/api/booking?date={date}",
                f"{self.base_url}/api/schedule?date={date}",
                f"{self.base_url}/api/courts?date={date}",
                f"{self.base_url}/bronirovanie/api?date={date}",
                f"{self.base_url}/api/bookings?date={date}",
            ]
            
            for endpoint in api_endpoints:
                try:
                    print(f"üîç –ü—Ä–æ–±—É–µ–º API: {endpoint}")
                    response = self.session.get(endpoint, timeout=10)
                    
                    if response.status_code == 200:
                        try:
                            data = response.json()
                            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç API: {endpoint}")
                            return data
                        except json.JSONDecodeError:
                            print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ JSON –æ—Ç: {endpoint}")
                            continue
                    else:
                        print(f"‚ùå HTTP {response.status_code} –æ—Ç: {endpoint}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
                    continue
            
            print("‚ùå –í—Å–µ API endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ API –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã {date}: {e}")
            return None
    
    def analyze_network_requests(self, date: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            url = f"{self.base_url}/bronirovanie/?date={date}"
            print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {date}")
            
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            html_content = response.text
            
            # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ API endpoints –≤ JavaScript –∫–æ–¥–µ
            api_patterns = [
                r'fetch\s*\(\s*[\'"`]([^\'"`]*api[^\'"`]*)[\'"`]',
                r'axios\.[get|post]\s*\(\s*[\'"`]([^\'"`]*api[^\'"`]*)[\'"`]',
                r'\.get\s*\(\s*[\'"`]([^\'"`]*api[^\'"`]*)[\'"`]',
                r'\.post\s*\(\s*[\'"`]([^\'"`]*api[^\'"`]*)[\'"`]',
                r'url\s*:\s*[\'"`]([^\'"`]*api[^\'"`]*)[\'"`]',
                r'endpoint\s*:\s*[\'"`]([^\'"`]*api[^\'"`]*)[\'"`]',
            ]
            
            found_endpoints = set()
            for pattern in api_patterns:
                matches = re.findall(pattern, html_content, re.IGNORECASE)
                for match in matches:
                    if match.startswith('/'):
                        full_url = f"{self.base_url}{match}"
                    elif match.startswith('http'):
                        full_url = match
                    else:
                        full_url = f"{self.base_url}/{match}"
                    found_endpoints.add(full_url)
            
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(found_endpoints)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö API endpoints:")
            for endpoint in found_endpoints:
                print(f"  ‚Ä¢ {endpoint}")
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            js_data_patterns = [
                r'var\s+(\w*data\w*)\s*=\s*(\{.*?\});',
                r'let\s+(\w*data\w*)\s*=\s*(\{.*?\});',
                r'const\s+(\w*data\w*)\s*=\s*(\{.*?\});',
                r'window\.(\w*data\w*)\s*=\s*(\{.*?\});',
            ]
            
            found_data = {}
            for pattern in js_data_patterns:
                matches = re.findall(pattern, html_content, re.DOTALL)
                for var_name, var_value in matches:
                    try:
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                        if var_value.strip().startswith('{'):
                            data = json.loads(var_value)
                            found_data[var_name] = data
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {var_name}")
                    except:
                        continue
            
            return {
                'found_endpoints': list(found_endpoints),
                'found_data': found_data,
                'html_length': len(html_content)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return {}
    
    def test_api_endpoints(self, date: str, endpoints: List[str]) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API endpoints"""
        results = {}
        
        for endpoint in endpoints:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É
                test_url = endpoint.replace('{date}', date).replace('{DATE}', date)
                
                print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_url}")
                response = self.session.get(test_url, timeout=10)
                
                results[test_url] = {
                    'status_code': response.status_code,
                    'content_type': response.headers.get('content-type', ''),
                    'content_length': len(response.text),
                    'success': response.status_code == 200
                }
                
                if response.status_code == 200:
                    print(f"  ‚úÖ HTTP {response.status_code}, {len(response.text)} –±–∞–π—Ç")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                    try:
                        json_data = response.json()
                        results[test_url]['json_data'] = json_data
                        print(f"  üìä JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∫–ª—é—á–∏: {list(json_data.keys()) if isinstance(json_data, dict) else '–Ω–µ dict'}")
                    except:
                        print(f"  ‚ö†Ô∏è –ù–µ JSON –¥–∞–Ω–Ω—ã–µ")
                else:
                    print(f"  ‚ùå HTTP {response.status_code}")
                    
            except Exception as e:
                results[test_url] = {
                    'error': str(e),
                    'success': False
                }
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return results
    
    def analyze_week_api(self, start_date: str = None) -> Dict[str, Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—é —á–µ—Ä–µ–∑ API"""
        if not start_date:
            start_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"üìÖ API –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {start_date}")
        print("=" * 70)
        
        results = {}
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
        first_date = start_dt.strftime('%Y-%m-%d')
        network_analysis = self.analyze_network_requests(first_date)
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {first_date}")
        print("-" * 50)
        print(f"üìä HTML –¥–ª–∏–Ω–∞: {network_analysis.get('html_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ endpoints: {len(network_analysis.get('found_endpoints', []))}")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(network_analysis.get('found_data', {}))}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ endpoints
        if network_analysis.get('found_endpoints'):
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö endpoints:")
            print("-" * 50)
            endpoint_results = self.test_api_endpoints(first_date, network_analysis['found_endpoints'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open(f'api_test_results_{first_date}.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'network_analysis': network_analysis,
                    'endpoint_results': endpoint_results
                }, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: api_test_results_{first_date}.json")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        for i in range(3):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è
            current_date = start_dt + timedelta(days=i)
            date_str = current_date.strftime('%Y-%m-%d')
            date_display = current_date.strftime('%d.%m.%Y (%A)')
            
            print(f"\nüìÖ {date_display}")
            print("-" * 40)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
            api_data = self.get_booking_api_data(date_str)
            
            results[date_str] = {
                'date_display': date_display,
                'api_data': api_data,
                'api_available': api_data is not None
            }
            
            if api_data:
                print(f"‚úÖ API –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∫–ª—é—á–∏: {list(api_data.keys()) if isinstance(api_data, dict) else '–Ω–µ dict'}")
            else:
                print("‚ùå API –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = APITennisAnalyzer()
    
    print("üéæ API –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–í–û–ë–û–î–ù–´–• –ö–û–†–¢–û–í")
    print("=" * 60)
    print("üîç –ü–æ–∏—Å–∫ API endpoints –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—é —á–µ—Ä–µ–∑ API
    results = analyzer.analyze_week_api()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("=" * 50)
    
    for date_str, data in results.items():
        print(f"\nüìÖ {data['date_display']}")
        print(f"  ‚Ä¢ API –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if data['api_available'] else '‚ùå'}")
        if data['api_data']:
            api_data = data['api_data']
            if isinstance(api_data, dict):
                print(f"  ‚Ä¢ –ö–ª—é—á–∏ –¥–∞–Ω–Ω—ã—Ö: {list(api_data.keys())}")
            else:
                print(f"  ‚Ä¢ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(api_data)}")
    
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
    print("  ‚Ä¢ api_test_results_*.json - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API")


if __name__ == "__main__":
    main()
