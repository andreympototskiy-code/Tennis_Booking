#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π API –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FinalAPIAnalyzer:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def get_enhanced_api_data(self, date: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è timestamp
            page_url = f"{self.base_url}/bronirovanie/?date={date}"
            page_response = self.session.get(page_url, timeout=10)
            page_response.raise_for_status()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp
            timestamp_match = re.search(r'initialize\?date=[^&]+&_=(\d+)', page_response.text)
            timestamp = timestamp_match.group(1) if timestamp_match else str(int(datetime.now().timestamp()))
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ API
            api_url = f"{self.base_url}/bronirovanie/initialize?date={date}&_={timestamp}"
            response = self.session.get(api_url, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º JavaScript –∫–æ–¥
            content = response.text
            initial_match = re.search(r'var initial = ({.*?});', content, re.DOTALL)
            
            if initial_match:
                json_str = initial_match.group(1)
                data = json.loads(json_str)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                enhanced_data = self.enhance_api_data(data, date)
                return enhanced_data
            
            return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã {date}: {e}")
            return None
    
    def enhance_api_data(self, data: Dict, date: str) -> Dict:
        """–£—Å–∏–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ API –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        enhanced = data.copy()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        instructions = data.get('instructions', {})
        set_data = instructions.get('set', {})
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {date}")
        print(f"  ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {list(instructions.keys())}")
        print(f"  ‚Ä¢ –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {list(set_data.keys())}")
        
        # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        occupied_fields = []
        for key, value in set_data.items():
            if any(word in key.lower() for word in ['occupied', 'busy', 'taken', 'booked', 'reserved', 'schedule']):
                occupied_fields.append({
                    'field': key,
                    'type': type(value).__name__,
                    'length': len(value) if isinstance(value, (list, dict)) else 1,
                    'value': value
                })
        
        enhanced['occupied_fields'] = occupied_fields
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∫–æ—Ä—Ç–æ–≤
        court_types = set_data.get('court_types', [])
        enhanced['court_analysis'] = {
            'total_court_types': len(court_types),
            'court_types_info': []
        }
        
        for court_type in court_types:
            court_info = {
                'name': court_type.get('name'),
                'courts_count': len(court_type.get('courts', [])),
                'courts': court_type.get('courts', [])
            }
            enhanced['court_analysis']['court_types_info'].append(court_info)
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏
        time_fields = []
        for key, value in set_data.items():
            if any(word in key.lower() for word in ['time', 'hour', 'schedule', 'slot']):
                time_fields.append({
                    'field': key,
                    'type': type(value).__name__,
                    'value': value
                })
        
        enhanced['time_fields'] = time_fields
        
        return enhanced
    
    def analyze_ground_courts_from_api(self, date: str) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ API –¥–∞–Ω–Ω—ã—Ö"""
        data = self.get_enhanced_api_data(date)
        if not data:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã
        instructions = data.get('instructions', {})
        set_data = instructions.get('set', {})
        court_types = set_data.get('court_types', [])
        
        ground_courts = []
        for court_type in court_types:
            if court_type.get('name') == '–ì—Ä—É–Ω—Ç':
                courts = court_type.get('courts', [])
                for court in courts:
                    ground_courts.append({
                        'court_id': court.get('id'),
                        'court_number': court.get('number'),
                        'court_type': '–ì—Ä—É–Ω—Ç'
                    })
        
        print(f"üèüÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(ground_courts)} –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã - –∏—â–µ–º –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
        occupied_slots = []
        occupied_fields = data.get('occupied_fields', [])
        
        for field_info in occupied_fields:
            field_value = field_info['value']
            if isinstance(field_value, list):
                occupied_slots.extend(field_value)
            elif isinstance(field_value, dict):
                occupied_slots.append(field_value)
        
        print(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(occupied_slots)} –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_file = f'detailed_analysis_{date}.json'
        with open(analysis_file, 'w', encoding='utf-8') as f:
            json.dump({
                'date': date,
                'ground_courts': ground_courts,
                'occupied_slots': occupied_slots,
                'occupied_fields': occupied_fields,
                'time_fields': data.get('time_fields', []),
                'court_analysis': data.get('court_analysis', {})
            }, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {analysis_file}")
        
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return []
    
    def analyze_week_final(self, start_date: str = None) -> Dict[str, Dict]:
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏"""
        if not start_date:
            start_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"üìÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {start_date}")
        print("=" * 70)
        
        results = {}
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        
        for i in range(7):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 7 –¥–Ω–µ–π
            current_date = start_dt + timedelta(days=i)
            date_str = current_date.strftime('%Y-%m-%d')
            date_display = current_date.strftime('%d.%m.%Y (%A)')
            
            print(f"\nüìÖ {date_display}")
            print("-" * 40)
            
            free_courts = self.analyze_ground_courts_from_api(date_str)
            results[date_str] = {
                'date_display': date_display,
                'free_courts': free_courts
            }
        
        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = FinalAPIAnalyzer()
    
    print("üéæ –§–ò–ù–ê–õ–¨–ù–´–ô API –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–í–û–ë–û–î–ù–´–• –ö–û–†–¢–û–í")
    print("=" * 60)
    print("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ API –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    test_dates = ['2025-09-17', '2025-09-18', '2025-09-19']
    
    for date in test_dates:
        print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {date}")
        print("=" * 50)
        analyzer.analyze_ground_courts_from_api(date)
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
    print("  ‚Ä¢ detailed_analysis_*.json - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚Ä¢ –ò–∑—É—á–∏—Ç–µ –ø–æ–ª—è occupied_fields –∏ time_fields –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞")


if __name__ == "__main__":
    main()
