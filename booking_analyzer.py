#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤
"""

import requests
import json
import time
from datetime import datetime, timedelta
from urllib.parse import urljoin, urlparse, parse_qs
import re

class BookingAnalyzer:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.booking_url = "https://x19.spb.ru/bronirovanie/"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        })
        
    def analyze_booking_page(self, date="2025-09-22"):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {date}")
        
        url = f"{self.booking_url}?date={date}"
        print(f"üì° –ó–∞–≥—Ä—É–∂–∞–µ–º: {url}")
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {response.status_code}")
            print(f"üìè –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            filename = f"booking_page_{date.replace('-', '_')}.html"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(response.text)
            print(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            
            return response.text
            
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None
    
    def find_booking_forms(self, html_content):
        """–ü–æ–∏—Å–∫ —Ñ–æ—Ä–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ HTML"""
        print("\nüîç –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –ò—â–µ–º —Ñ–æ—Ä–º—ã
        form_patterns = [
            r'<form[^>]*>(.*?)</form>',
            r'<div[^>]*class="[^"]*form[^"]*"[^>]*>(.*?)</div>',
            r'<div[^>]*class="[^"]*booking[^"]*"[^>]*>(.*?)</div>',
        ]
        
        forms_found = []
        for pattern in form_patterns:
            matches = re.findall(pattern, html_content, re.DOTALL | re.IGNORECASE)
            if matches:
                forms_found.extend(matches)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(forms_found)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_buttons = re.findall(
            r'<[^>]*(?:button|input|a)[^>]*(?:–±—Ä–æ–Ω–∏—Ä|–∑–∞–±—Ä–æ–Ω–∏—Ä|book)[^>]*>(.*?)</[^>]*>',
            html_content, re.DOTALL | re.IGNORECASE
        )
        
        print(f"üîò –ù–∞–π–¥–µ–Ω–æ {len(booking_buttons)} –∫–Ω–æ–ø–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        input_fields = re.findall(
            r'<input[^>]*name="([^"]*)"[^>]*>',
            html_content, re.IGNORECASE
        )
        
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(input_fields)} –ø–æ–ª–µ–π –≤–≤–æ–¥–∞:")
        for field in input_fields:
            print(f"  ‚Ä¢ {field}")
        
        return {
            'forms': forms_found,
            'buttons': booking_buttons,
            'inputs': input_fields
        }
    
    def find_api_endpoints(self, html_content):
        """–ü–æ–∏—Å–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüîç –ü–æ–∏—Å–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        # –ò—â–µ–º JavaScript –∫–æ–¥ —Å API –≤—ã–∑–æ–≤–∞–º–∏
        api_patterns = [
            r'fetch\(["\']([^"\']+)["\']',
            r'axios\.[a-z]+\(["\']([^"\']+)["\']',
            r'\.post\(["\']([^"\']+)["\']',
            r'\.get\(["\']([^"\']+)["\']',
            r'url:\s*["\']([^"\']+)["\']',
            r'endpoint:\s*["\']([^"\']+)["\']',
        ]
        
        endpoints = set()
        for pattern in api_patterns:
            matches = re.findall(pattern, html_content, re.IGNORECASE)
            endpoints.update(matches)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL
        booking_endpoints = []
        for endpoint in endpoints:
            if any(keyword in endpoint.lower() for keyword in ['book', 'reserv', 'order', 'pay']):
                booking_endpoints.append(endpoint)
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(booking_endpoints)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for endpoint in booking_endpoints:
            print(f"  ‚Ä¢ {endpoint}")
        
        return booking_endpoints
    
    def analyze_booking_flow(self, date="2025-09-22"):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"üéæ –ê–ù–ê–õ–ò–ó –ü–†–û–¶–ï–°–°–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        html_content = self.analyze_booking_page(date)
        if not html_content:
            return None
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—ã
        forms_data = self.find_booking_forms(html_content)
        
        # 3. –ò—â–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        api_endpoints = self.find_api_endpoints(html_content)
        
        # 4. –ò—â–µ–º Vue.js –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        vue_components = re.findall(
            r'<[^>]*v-[a-z-]+[^>]*>',
            html_content, re.IGNORECASE
        )
        print(f"\n‚ö° –ù–∞–π–¥–µ–Ω–æ {len(vue_components)} Vue.js –¥–∏—Ä–µ–∫—Ç–∏–≤")
        
        # 5. –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        init_data_patterns = [
            r'window\.\$INITIAL\s*=\s*({.*?});',
            r'window\.\$DATA\s*=\s*({.*?});',
            r'window\.\$CONFIG\s*=\s*({.*?});',
        ]
        
        init_data = {}
        for pattern in init_data_patterns:
            matches = re.findall(pattern, html_content, re.DOTALL)
            if matches:
                try:
                    data = json.loads(matches[0])
                    init_data.update(data)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        return {
            'html_content': html_content,
            'forms': forms_data,
            'api_endpoints': api_endpoints,
            'vue_components': vue_components,
            'init_data': init_data
        }
    
    def test_booking_endpoints(self, endpoints):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        for endpoint in endpoints:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint}")
            
            # –ü—Ä–æ–±—É–µ–º GET –∑–∞–ø—Ä–æ—Å
            try:
                response = self.session.get(endpoint)
                print(f"  GET {response.status_code}: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ï—Å–ª–∏ —ç—Ç–æ JSON
                if 'application/json' in response.headers.get('content-type', ''):
                    try:
                        data = response.json()
                        print(f"  üìä JSON –¥–∞–Ω–Ω—ã–µ: {len(str(data))} —Å–∏–º–≤–æ–ª–æ–≤")
                    except:
                        pass
                        
            except requests.RequestException as e:
                print(f"  ‚ùå GET –æ—à–∏–±–∫–∞: {e}")
            
            # –ü—Ä–æ–±—É–µ–º POST –∑–∞–ø—Ä–æ—Å
            try:
                test_data = {
                    'test': 'booking_analyzer',
                    'date': '2025-09-22',
                    'court_id': 1,
                    'time': '22:00'
                }
                response = self.session.post(endpoint, json=test_data)
                print(f"  POST {response.status_code}: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            except requests.RequestException as e:
                print(f"  ‚ùå POST –æ—à–∏–±–∫–∞: {e}")

def main():
    analyzer = BookingAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_data = analyzer.analyze_booking_flow("2025-09-22")
    
    if booking_data:
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 50)
        print(f"üìã –§–æ—Ä–º—ã: {len(booking_data['forms']['forms'])}")
        print(f"üîò –ö–Ω–æ–ø–∫–∏: {len(booking_data['forms']['buttons'])}")
        print(f"üìù –ü–æ–ª—è –≤–≤–æ–¥–∞: {len(booking_data['forms']['inputs'])}")
        print(f"üéØ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {len(booking_data['api_endpoints'])}")
        print(f"‚ö° Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(booking_data['vue_components'])}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        if booking_data['api_endpoints']:
            analyzer.test_booking_endpoints(booking_data['api_endpoints'])
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
