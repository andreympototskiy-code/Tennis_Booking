#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ x19.spb.ru
"""

import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from final_monitor import FinalTennisMonitor

def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    
    print("üéæ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ê –¢–ï–ù–ù–ò–°–ù–û–ì–û –°–ê–ô–¢–ê x19.spb.ru")
    print("=" * 60)
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    monitor = FinalTennisMonitor()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ —Å–ª–æ—Ç—ã
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–¢–†–ê–®–ù–ò–• –°–õ–û–¢–û–í")
    print("-" * 40)
    
    tomorrow = datetime.now() + timedelta(days=1)
    tomorrow_str = tomorrow.strftime('%Y-%m-%d')
    print(f"üìÖ –î–∞—Ç–∞: {tomorrow_str}")
    
    tomorrow_slots = monitor.get_tomorrow_slots()
    
    if tomorrow_slots:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tomorrow_slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ—Ç–æ–≤
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:")
        for i, slot in enumerate(tomorrow_slots[:5]):
            print(f"  {i+1}. {slot['time_from']}-{slot['time_to']} - {slot['court_type']} (–ö–æ—Ä—Ç ‚Ññ{slot['court_number']})")
        
        if len(tomorrow_slots) > 5:
            print(f"  ... –∏ –µ—â–µ {len(tomorrow_slots) - 5} —Å–ª–æ—Ç–æ–≤")
    else:
        print("‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
    print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–û–ô –î–ê–¢–´")
    print("-" * 40)
    
    test_date = "2025-09-16"
    print(f"üìÖ –î–∞—Ç–∞: {test_date}")
    
    specific_slots = monitor.get_slots_for_date(test_date)
    
    if specific_slots:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(specific_slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ {test_date}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        time_groups = {}
        for slot in specific_slots:
            time_key = f"{slot['time_from']}-{slot['time_to']}"
            if time_key not in time_groups:
                time_groups[time_key] = []
            time_groups[time_key].append(slot)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:")
        for time_range, slots in sorted(time_groups.items()):
            court_types = set(slot['court_type'] for slot in slots)
            print(f"  ‚è∞ {time_range}: {len(slots)} —Å–ª–æ—Ç–æ–≤ ({', '.join(court_types)})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        popular_times = sorted(time_groups.items(), key=lambda x: len(x[1]), reverse=True)[:3]
        print(f"\nüèÜ –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞:")
        for i, (time_range, slots) in enumerate(popular_times, 1):
            print(f"  {i}. {time_range} - {len(slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤")
    else:
        print("‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ—Ä—Ç–æ–≤
    print("\n3Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ö–û–†–¢–û–í")
    print("-" * 40)
    
    if specific_slots:
        court_stats = {}
        for slot in specific_slots:
            court_type = slot['court_type']
            if court_type not in court_stats:
                court_stats[court_type] = 0
            court_stats[court_type] += 1
        
        print("üìà –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –ø–æ–∫—Ä—ã—Ç–∏—è:")
        for court_type, count in sorted(court_stats.items(), key=lambda x: x[1], reverse=True):
            print(f"  üèüÔ∏è  {court_type}: {count} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
    
    # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n4Ô∏è‚É£ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("-" * 40)
    
    all_slots = tomorrow_slots + specific_slots
    if all_slots:
        filename = f"demo_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        monitor.save_slots_to_file(all_slots, filename)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            file_size = os.path.getsize(filename)
            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        except:
            pass
    
    # 5. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    print("\n5Ô∏è‚É£ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("-" * 40)
    
    total_slots = len(tomorrow_slots) + len(specific_slots)
    
    if total_slots > 0:
        print("üéâ –ú–æ–Ω–∏—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_slots} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  ‚Ä¢ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
    else:
        print("‚ö†Ô∏è  –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  ‚Ä¢ –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã")
        print("  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∞–π—Ç—É")
        print("  ‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ API")
    
    print("\n" + "=" * 60)
    print("üéæ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 60)

if __name__ == "__main__":
    try:
        demo()
    except KeyboardInterrupt:
        print("\n\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ final_monitor.log")
