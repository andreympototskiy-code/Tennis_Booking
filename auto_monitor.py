#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
"""

import time
import schedule
import json
from datetime import datetime, timedelta
from tennis_monitor import TennisMonitor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('auto_monitor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class AutoTennisMonitor:
    def __init__(self):
        self.monitor = TennisMonitor()
        self.last_known_slots = {}
        self.notification_file = 'notifications.json'
        
    def load_last_slots(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.notification_file, 'r', encoding='utf-8') as f:
                self.last_known_slots = json.load(f)
        except FileNotFoundError:
            self.last_known_slots = {}
            logging.info("–§–∞–π–ª —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è")
    
    def save_last_slots(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.notification_file, 'w', encoding='utf-8') as f:
                json.dump(self.last_known_slots, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {e}")
    
    def get_new_slots(self, date: str, current_slots: list) -> list:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        
        Args:
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            current_slots: –¢–µ–∫—É—â–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤
        """
        new_slots = []
        
        if date not in self.last_known_slots:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã, –≤—Å–µ —Å–ª–æ—Ç—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–æ–≤—ã–º–∏
            self.last_known_slots[date] = []
            return current_slots
        
        last_slots = self.last_known_slots[date]
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_times = {slot['time'] for slot in current_slots}
        last_times = {slot['time'] for slot in last_slots}
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã
        new_times = current_times - last_times
        for slot in current_slots:
            if slot['time'] in new_times:
                new_slots.append(slot)
        
        return new_slots
    
    def send_notification(self, new_slots: list, date: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
        
        Args:
            new_slots: –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        """
        if not new_slots:
            return
        
        print(f"\nüîî –£–í–ï–î–û–ú–õ–ï–ù–ò–ï! –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {date}")
        print("=" * 60)
        
        for slot in new_slots:
            print(f"‚è∞ –í—Ä–µ–º—è: {slot['time']}")
            print(f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {slot['element_text']}")
            print("-" * 30)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email, telegram, SMS –∏ —Ç.–¥.
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_slots)} –Ω–æ–≤—ã—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ {date}")
    
    def check_date(self, date: str):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        
        Args:
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        """
        logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –¥–∞—Ç—ã: {date}")
        
        try:
            current_slots = self.monitor.get_slots_for_date(date)
            new_slots = self.get_new_slots(date, current_slots)
            
            if new_slots:
                self.send_notification(new_slots, date)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã
            self.last_known_slots[date] = current_slots
            self.save_last_slots()
            
            # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {date}:")
            print(f"   –í—Å–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(current_slots)}")
            print(f"   –ù–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(new_slots)}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã {date}: {e}")
    
    def check_tomorrow(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        tomorrow = datetime.now() + timedelta(days=1)
        tomorrow_str = tomorrow.strftime('%Y-%m-%d')
        self.check_date(tomorrow_str)
    
    def check_specific_date(self, date_str: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        self.check_date(date_str)
    
    def start_monitoring(self, check_interval_minutes: int = 10):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        Args:
            check_interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        logging.info(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {check_interval_minutes} –º–∏–Ω—É—Ç")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã
        self.load_last_slots()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        schedule.every(check_interval_minutes).minutes.do(self.check_tomorrow)
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("üéæ –ó–∞–ø—É—Å–∫ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞...")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval_minutes} –º–∏–Ω—É—Ç")
        print("üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        print("=" * 50)
        
        self.check_tomorrow()
        
        print(f"\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {check_interval_minutes} –º–∏–Ω—É—Ç.")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while True:
                schedule.run_pending()
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    auto_monitor = AutoTennisMonitor()
    
    print("üéæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ x19.spb.ru")
    print("=" * 60)
    
    # –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1. –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö —Å–ª–æ—Ç–æ–≤\n2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    if choice == "1":
        auto_monitor.load_last_slots()
        auto_monitor.check_tomorrow()
        
    elif choice == "2":
        try:
            interval = int(input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or "10")
        except ValueError:
            interval = 10
        auto_monitor.start_monitoring(interval)
        
    elif choice == "3":
        date_input = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-09-16): ").strip()
        auto_monitor.load_last_slots()
        auto_monitor.check_specific_date(date_input)
        
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()
