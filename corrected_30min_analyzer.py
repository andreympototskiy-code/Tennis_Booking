#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —É—á–µ—Ç–æ–º 30-–º–∏–Ω—É—Ç–Ω—ã—Ö —è—á–µ–µ–∫
"""

import requests
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Corrected30MinAnalyzer:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def get_real_api_data(self, date: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è timestamp
            page_url = f"{self.base_url}/bronirovanie/?date={date}"
            page_response = self.session.get(page_url, timeout=10)
            page_response.raise_for_status()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp
            timestamp_match = re.search(r'initialize\?date=[^&]+&_=(\d+)', page_response.text)
            timestamp = timestamp_match.group(1) if timestamp_match else str(int(datetime.now().timestamp()))
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ API
            api_url = f"{self.base_url}/bronirovanie/initialize?date={date}&_={timestamp}"
            response = self.session.get(api_url, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º JavaScript –∫–æ–¥
            content = response.text
            initial_match = re.search(r'var initial = ({.*?});', content, re.DOTALL)
            
            if initial_match:
                json_str = initial_match.group(1)
                data = json.loads(json_str)
                return data
            
            return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã {date}: {e}")
            return None
    
    def analyze_ground_courts_22h_corrected(self, date: str) -> List[Dict]:
        """
        –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º 30-–º–∏–Ω—É—Ç–Ω—ã—Ö —è—á–µ–µ–∫
        """
        print(f"üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ {date}")
        print("üìä –£—á–∏—Ç—ã–≤–∞–µ–º 30-–º–∏–Ω—É—Ç–Ω—ã–µ —è—á–µ–π–∫–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
        data = self.get_real_api_data(date)
        if not data:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {date}")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä—Ç–∞—Ö
        instructions = data.get('instructions', {})
        set_data = instructions.get('set', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã
        court_types = set_data.get('court_types', [])
        ground_courts = []
        
        for court_type in court_types:
            if court_type.get('name') == '–ì—Ä—É–Ω—Ç':
                courts = court_type.get('courts', [])
                for court in courts:
                    ground_courts.append({
                        'court_id': court.get('id'),
                        'court_number': court.get('number'),
                        'court_type': '–ì—Ä—É–Ω—Ç'
                    })
        
        print(f"üèüÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(ground_courts)} –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –ó–ê–ù–Ø–¢–´–ï —Å–ª–æ—Ç—ã –∏–∑ time_blocked
        time_blocked = set_data.get('time_blocked', [])
        print(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(time_blocked)} –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ time_blocked")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º 30-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è 22:00-00:00
        # 22:00-22:30, 22:30-23:00, 23:00-23:30, 23:30-00:00
        target_slots = [
            {'start_hour': 22, 'start_min': 0, 'end_hour': 22, 'end_min': 30},   # 22:00-22:30
            {'start_hour': 22, 'start_min': 30, 'end_hour': 23, 'end_min': 0},   # 22:30-23:00
            {'start_hour': 23, 'start_min': 0, 'end_hour': 23, 'end_min': 30},   # 23:00-23:30
            {'start_hour': 23, 'start_min': 30, 'end_hour': 0, 'end_min': 0},    # 23:30-00:00
        ]
        
        free_courts = []
        
        for court in ground_courts:
            court_id = court['court_id']
            court_number = court['court_number']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π 30-–º–∏–Ω—É—Ç–Ω—ã–π —Å–ª–æ—Ç
            slot_status = {}
            for i, slot in enumerate(target_slots):
                slot_name = f"{slot['start_hour']:02d}:{slot['start_min']:02d}-{slot['end_hour']:02d}:{slot['end_min']:02d}"
                slot_status[slot_name] = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–æ–±–æ–¥–µ–Ω
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç —Å–ª–æ—Ç
                for blocked in time_blocked:
                    if blocked.get('court_id') == court_id:
                        time_from = blocked.get('time_from', {})
                        time_to = blocked.get('time_to', {})
                        
                        from_hours = time_from.get('hours', 0)
                        from_minutes = time_from.get('minutes', 0)
                        to_hours = time_to.get('hours', 0)
                        to_minutes = time_to.get('minutes', 0)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º —Å–ª–æ—Ç–æ–º
                        if self.slots_overlap(
                            slot['start_hour'], slot['start_min'],
                            slot['end_hour'], slot['end_min'],
                            from_hours, from_minutes,
                            to_hours, to_minutes
                        ):
                            slot_status[slot_name] = False
                            break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
            available_slots = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π 2-—á–∞—Å–æ–≤–æ–π —Å–ª–æ—Ç (22:00-00:00)
            if all(slot_status.values()):
                available_slots.append('22:00-00:00')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–ª–æ—Ç—ã
            if slot_status['22:30-23:00'] and slot_status['23:00-23:30'] and slot_status['23:30-00:00']:
                available_slots.append('22:30-00:00')
            
            if slot_status['23:00-23:30'] and slot_status['23:30-00:00']:
                available_slots.append('23:00-00:00')
            
            if slot_status['23:30-00:00']:
                available_slots.append('23:30-00:00')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
            if available_slots:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
                best_slot = max(available_slots, key=lambda x: self.get_slot_duration(x))
                
                free_courts.append({
                    'court_number': court_number,
                    'court_type': '–ì—Ä—É–Ω—Ç',
                    'time_display': best_slot,
                    'court_id': court_id,
                    'all_available_slots': available_slots
                })
                
                print(f"  ‚úÖ –ö–æ—Ä—Ç ‚Ññ{court_number}: {best_slot} (–¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(available_slots)})")
            else:
                print(f"  ‚ùå –ö–æ—Ä—Ç ‚Ññ{court_number}: –∑–∞–Ω—è—Ç")
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(free_courts)} –∫–æ—Ä—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏")
        
        return free_courts
    
    def slots_overlap(self, start1_h, start1_m, end1_h, end1_m, start2_h, start2_m, end2_h, end2_m):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
        start1_minutes = start1_h * 60 + start1_m
        end1_minutes = end1_h * 60 + end1_m
        start2_minutes = start2_h * 60 + start2_m
        end2_minutes = end2_h * 60 + end2_m
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å –ø–æ–ª—É–Ω–æ—á—å—é (00:00)
        if end1_minutes == 0:
            end1_minutes = 24 * 60  # 24:00
        if end2_minutes == 0:
            end2_minutes = 24 * 60  # 24:00
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        return not (end1_minutes <= start2_minutes or end2_minutes <= start1_minutes)
    
    def get_slot_duration(self, slot_str: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –≤ —á–∞—Å–∞—Ö"""
        if slot_str == '22:00-00:00':
            return 2.0
        elif slot_str == '22:30-00:00':
            return 1.5
        elif slot_str == '23:00-00:00':
            return 1.0
        elif slot_str == '23:30-00:00':
            return 0.5
        else:
            return 0.0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = Corrected30MinAnalyzer()
    
    print("üéæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –° 30-–ú–ò–ù–£–¢–ù–´–ú–ò –Ø–ß–ï–ô–ö–ê–ú–ò")
    print("=" * 60)
    print("üîç –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º 30-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 22 —Å–µ–Ω—Ç—è–±—Ä—è
    date = '2025-09-22'
    date_display = '22.09.2025 (–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)'
    
    print(f"üìÖ –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ {date_display}")
    print("-" * 50)
    
    free_courts = analyzer.analyze_ground_courts_22h_corrected(date)
    
    if free_courts:
        print(f"\n‚úÖ –ò–¢–û–ì–û: {len(free_courts)} –∫–æ—Ä—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –∫–æ—Ä—Ç–∞–º
        court_groups = {}
        for court in free_courts:
            court_number = court['court_number']
            if court_number in [4, 5, 6]:
                physical_court = '–î—É—Ç–∏–∫ ‚Ññ 2'
            elif court_number in [7, 8, 9]:
                physical_court = '–î—É—Ç–∏–∫ ‚Ññ 3'
            elif court_number in [10, 11, 12, 13]:
                physical_court = '–î—É—Ç–∏–∫ ‚Ññ 4'
            else:
                physical_court = f'–ö–æ—Ä—Ç ‚Ññ {court_number}'
            
            if physical_court not in court_groups:
                court_groups[physical_court] = []
            court_groups[physical_court].append(court)
        
        print("\nüèüÔ∏è –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã:")
        for physical_court, courts in court_groups.items():
            print(f"\n{physical_court}:")
            for court in courts:
                print(f"  ‚Ä¢ –ö–æ—Ä—Ç ‚Ññ{court['court_number']} - {court['time_display']}")
                if len(court['all_available_slots']) > 1:
                    print(f"    (—Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(court['all_available_slots'][1:])})")
    else:
        print("\n‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–µ—Ç")


if __name__ == "__main__":
    main()
