#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ HTML –∏ CSS
"""

import requests
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AutomaticTennisAnalyzer:
    def __init__(self):
        self.base_url = "https://x19.spb.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # –¶–≤–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç
        self.occupied_color = "#d1d1d1"
        
    def get_html_page(self, date: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
        try:
            url = f"{self.base_url}/bronirovanie/?date={date}"
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            return response.text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML –¥–ª—è –¥–∞—Ç—ã {date}: {e}")
            return None
    
    def parse_html_schedule(self, html_content: str, date: str) -> Dict:
        """
        –ü–∞—Ä—Å–∏—Ç HTML —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞ –ø–æ CSS —Å—Ç–∏–ª—è–º
        """
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ HTML —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {date}")
        
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        with open(f'html_schedule_{date}.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"üíæ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: html_schedule_{date}.html")
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_table = soup.find('table') or soup.find('div', class_=re.compile(r'schedule|timetable|grid'))
        
        if not schedule_table:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return {}
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ —Å –∑–∞–Ω—è—Ç—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
        occupied_cells = schedule_table.find_all(attrs={'style': re.compile(r'background\s*:\s*#d1d1d1')})
        
        print(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(occupied_cells)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –ø–æ —Å—Ç–∏–ª—é background: #d1d1d1")
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å—ã
        occupied_by_class = schedule_table.find_all(class_=re.compile(r'occupied|busy|taken|booked'))
        print(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(occupied_by_class)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –ø–æ CSS –∫–ª–∞—Å—Å–∞–º")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        rows = schedule_table.find_all('tr')
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        # –ò—â–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω–∞
        all_colored_cells = schedule_table.find_all(attrs={'style': re.compile(r'background')})
        print(f"üé® –ù–∞–π–¥–µ–Ω–æ {len(all_colored_cells)} —è—á–µ–µ–∫ —Å —Ü–≤–µ—Ç–æ–º —Ñ–æ–Ω–∞")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —è—á–µ–µ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        for i, cell in enumerate(all_colored_cells[:5]):
            style = cell.get('style', '')
            class_attr = cell.get('class', [])
            print(f"  –Ø—á–µ–π–∫–∞ {i+1}: style='{style}', class='{class_attr}'")
        
        return {
            'total_rows': len(rows),
            'occupied_by_style': len(occupied_cells),
            'occupied_by_class': len(occupied_by_class),
            'all_colored_cells': len(all_colored_cells),
            'schedule_found': True
        }
    
    def analyze_ground_courts_automatic(self, date: str) -> List[Dict]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–Ω—Ç–æ–≤—ã–µ –∫–æ—Ä—Ç—ã –≤ 22:00-00:00
        """
        html_content = self.get_html_page(date)
        if not html_content:
            return []
        
        # –ü–∞—Ä—Å–∏–º HTML
        schedule_data = self.parse_html_schedule(html_content, date)
        
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤
        return []
    
    def analyze_week_automatic(self, start_date: str = None) -> Dict[str, Dict]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
        """
        if not start_date:
            start_date = datetime.now().strftime('%Y-%m-%d')
        
        print(f"üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {start_date}")
        print("=" * 70)
        
        results = {}
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        
        for i in range(7):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 7 –¥–Ω–µ–π
            current_date = start_dt + timedelta(days=i)
            date_str = current_date.strftime('%Y-%m-%d')
            date_display = current_date.strftime('%d.%m.%Y (%A)')
            
            print(f"\nüìÖ {date_display}")
            print("-" * 40)
            
            free_courts = self.analyze_ground_courts_automatic(date_str)
            results[date_str] = {
                'date_display': date_display,
                'free_courts': free_courts,
                'schedule_data': self.parse_html_schedule(self.get_html_page(date_str), date_str) if self.get_html_page(date_str) else {}
            }
        
        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = AutomaticTennisAnalyzer()
    
    print("üéæ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–í–û–ë–û–î–ù–´–• –ö–û–†–¢–û–í")
    print("=" * 60)
    print("üîç –ü–æ–∏—Å–∫ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç –ø–æ CSS: background: #d1d1d1;")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    test_dates = [
        '2025-09-17',  # –°—Ä–µ–¥–∞
        '2025-09-18',  # –ß–µ—Ç–≤–µ—Ä–≥  
        '2025-09-19',  # –ü—è—Ç–Ω–∏—Ü–∞
    ]
    
    for date in test_dates:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ {date}")
        print("=" * 40)
        analyzer.analyze_ground_courts_automatic(date)
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
    print("  ‚Ä¢ html_schedule_*.html - HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    print("  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞")


if __name__ == "__main__":
    main()
